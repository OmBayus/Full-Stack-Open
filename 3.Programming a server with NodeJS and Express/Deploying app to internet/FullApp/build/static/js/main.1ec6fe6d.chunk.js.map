{"version":3,"sources":["Note.jsx","Notification.jsx","services/note.js","App.jsx","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","notesToShow","filter","map","i","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","onChange","target","value","type","ReactDOM","render","document","getElementById"],"mappings":"sLAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACVC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCQ/BK,EAfM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,OAAgB,OAAZA,EACK,KAIP,qBAAKJ,UAAU,QAAf,SACGI,K,gBCRLC,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCHrCK,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAiGSC,EA1FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEaF,mBAAS,IAFtB,mBAETG,EAFS,KAEDC,EAFC,OAGaJ,oBAAS,GAHtB,mBAGTK,EAHS,KAGDC,EAHC,OAIuBN,mBAAS,0BAJhC,mBAITO,EAJS,KAIIC,EAJJ,KAehBC,qBATa,WACXC,QAAQC,IAAI,UACZC,IAEGzB,MAAK,SAAAC,GACJc,EAASd,QAIC,IA2ChB,IAAMyB,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAAAvC,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASwB,IACvB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGQ,EAAYE,KAAI,SAACxC,EAAKyC,GAAN,OACf,cAAC,EAAD,CAEEzC,KAAMA,EACNC,iBAAkB,kBA3DD,SAAAgB,GACzB,IAAMjB,EAAO0B,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAQ5C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDkC,EACUpB,EAAI2B,GACXhC,MAAK,SAAAC,GACJc,EAASD,EAAMc,KAAI,SAAAxC,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAOa,SAEpDgC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGf0C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMa,QAAO,SAAAI,GAAC,OAAIA,EAAE1B,KAAOA,SA2CR+B,CAAmBhD,EAAKiB,MAF3CwB,QAMX,uBAAMQ,SA1CM,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASuB,EACTyB,KAAM,IAAIC,KACVnD,UAAWoD,KAAKC,SAAW,IAG7BnB,EACUe,GACPxC,MAAK,SAAAC,GACJc,EAASD,EAAM+B,OAAO5C,IACtBgB,EAAW,QA8Bb,UACE,uBAAO6B,SA3Bb,SAA0BR,GACxBrB,EAAWqB,EAAMS,OAAOC,QA0BeA,MAAOhC,IAC1C,wBAAQiC,KAAK,SAAb,uBAGF,cAAC,EAAD,QC5GNC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.1ec6fe6d.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n      const label = note.important\r\n        ? 'make not important' : 'make important'\r\n    \r\n      return (\r\n        <li className=\"note\">\r\n          {note.content} \r\n          <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n      )\r\n    }\r\n\r\n\r\nexport default Note","import React from \"react\"\r\n\r\nconst Notification = ({ message }) => {\r\n      if (message === null) {\r\n        return null\r\n      }\r\n    \r\n      return (\r\n        <div className=\"error\">\r\n          {message}\r\n        </div>\r\n      )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll, \r\n  create, \r\n  update\r\n}","import React, { useEffect, useState } from 'react'\n\n//Components\n\nimport Note from \"./Note\"\nimport Notification from \"./Notification\"\n\n\n//Services\nimport noteService from './services/note'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote,setNewNote] = useState(\"\")\n  const [showAll,setShowAll] = useState(false)\n  const [errorMessage,setErrorMessage] = useState(\"some error happened...\")\n\n  const hook = () => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response)\n      })\n  }\n  \n  useEffect(hook, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n\n  const addNote = event => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() < 0.5,\n    }\n  \n    noteService\n      .create(noteObject)\n      .then(response => {\n        setNotes(notes.concat(response))\n        setNewNote('')\n      })\n  }\n\n  function handleNoteChange(event){\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note,i) => \n          <Note\n            key={i}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input onChange={handleNoteChange} value={newNote}/>\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}